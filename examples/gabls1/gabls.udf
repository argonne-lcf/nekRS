#include "tavg.hpp"
#include <numeric> // For std::accumulate

std::unique_ptr<tavg> avg;

static deviceMemory<dfloat> o_divTau;

/* latitude north */
static dfloat NLAT;
/* geostrophic wind speed [m/s] */
static dfloat UREF;

static double tREF;

static dfloat LREF;
/* potential temperature */
static dfloat TREF;
/* initial surface temperature */
static dfloat TS0;
/* surface cooling rate [K/h] */
static dfloat SCR;
/* inversion layer strength [K/m]*/
static dfloat ILSTRENGTH;

static int NUMBER_ELEMENTS_X;
static int NUMBER_ELEMENTS_Y;
static int NUMBER_ELEMENTS_Z;
static dfloat XLEN;
static dfloat YLEN;
static dfloat ZLEN;

static dfloat Z0;
static dfloat Z1;

static dfloat SCOOLRATE;
static dfloat T0S;
static dfloat GACC;

static dfloat BETAM;
static dfloat BETAH;
static dfloat KAPPA;
static dfloat ZWALL;

static double startTimeStatistics;

static dfloat maxDt0 = -1;

#ifdef __okl__

void udfDirichlet(bcData *bc)
{
  if (isField("fluid velocity")) {
    bc->uxFluid = 1.0;
    bc->uyFluid = 0.0;
    bc->uzFluid = 0.0;
  }
}

void udfNeumann(bcData *bc)
{
  if (isField("fluid velocity")) {
    const dfloat invMagUWall = 1 / bc->usrwrk[1];
    const dfloat uTau = bc->usrwrk[3];
 
    const dfloat ut1x = bc->uxFluid * bc->t1x + bc->uyFluid * bc->t1y + bc->uzFluid * bc->t1z;
    const dfloat ut2x = bc->uxFluid * bc->t2x + bc->uyFluid * bc->t2y + bc->uzFluid * bc->t2z;
 
    bc->tr1 = -ut1x * invMagUWall * uTau * uTau;
    bc->tr2 = -ut2x * invMagUWall * uTau * uTau;
  } else if (isField("scalar temperature")) {
    bc->fluxScalar = p_cond * p_TsGrad;
    if (bc->id == 2) {
      const dfloat thts = bc->usrwrk[0];
      const dfloat dtempWall = fabs(bc->usrwrk[2] - (thts - 1));
      const dfloat uTau = bc->usrwrk[3];
      const dfloat thetaTau = bc->usrwrk[4];
      const dfloat dtemp = bc->sScalar - (thts - 1);
 
      bc->fluxScalar = 0;
      if (dtempWall > 0) {
        bc->fluxScalar = -dtemp / dtempWall * uTau * thetaTau;
      }
    }
  }
}

#include "gabls.oudf"

#endif

void findUThetaTau(dfloat uWall, dfloat tempWall, dfloat &uTau, dfloat &thetaTau)
{
  const auto tol = 1e-8;
  const auto brat = BETAH / BETAM;
  const auto z1z0 = Z1 / Z0;
  const auto UmN = KAPPA * uWall / log(z1z0);
  const auto ThN = KAPPA * tempWall / log(z1z0);
  const auto RiBulk = tempWall * ZWALL * GACC / uWall / uWall;
  const auto RiCrit = RiBulk * BETAM * BETAM / BETAH;

  uTau = 0;
  thetaTau = 0;

  if (uWall < tol || RiCrit >= 1) {
    return;
  }

  if (fabs(brat - 1) < tol) {
    uTau = UmN * (1 - BETAM * RiBulk);
    thetaTau = ThN * (1 - BETAM * RiBulk);
  } else { // find roots of utau1 and utau2
    const auto Det = 1 + 4 * RiBulk * (BETAH - BETAM);
    nekrsCheck(Det < 0, MPI_COMM_SELF, EXIT_FAILURE, "%s\b", "findUThetaTau: Det < 0!");
  
    const auto utau1 = (0.5 * (2 * brat - 1) * UmN / (brat - 1)) * (1 - std::sqrt(Det) / (2 * brat - 1));
    const auto utau2 = (0.5 * (2 * brat - 1) * UmN / (brat - 1)) * (1 + std::sqrt(Det) / (2 * brat - 1));
    auto thetau1 = 0.0;
    if (RiBulk > tol) {
      const auto scale = 1 / BETAM / KAPPA / GACC / ZWALL;
      thetau1 = scale * utau1 * (KAPPA * uWall - utau1 * log(z1z0));
    }
    if (utau1 >= 0 && thetau1 >= 0) {
      uTau = utau1;
      thetaTau = thetau1;
    }
  }
}

auto planarAverage()
{
  auto mesh = nrs->meshV;
  poolDeviceMemory<dfloat> o_work(6 * nrs->fieldOffset);

  // <u>(y)
  auto o_ux = nrs->scalar->o_U.slice(0 * nrs->fieldOffset, nrs->fieldOffset);
  o_work.copyFrom(o_ux, nrs->fieldOffset, 0 * nrs->fieldOffset);

  // <w>(y)
  auto o_uz = nrs->scalar->o_U.slice(2 * nrs->fieldOffset, nrs->fieldOffset);
  o_work.copyFrom(o_uz, nrs->fieldOffset, 1 * nrs->fieldOffset);

  // <temp>(y)
  auto o_temp = nrs->scalar->o_S.slice(0 * nrs->fieldOffset, nrs->fieldOffset);
  o_work.copyFrom(o_temp, nrs->fieldOffset, 2 * nrs->fieldOffset);

  // d<u,w,temp>/dy(y)
  auto o_ddyAvg = o_work.slice(3 * nrs->fieldOffset, 3 * nrs->fieldOffset);
  vecGradY(mesh->Nelements, mesh->o_vgeo, mesh->o_D, nrs->fieldOffset, mesh->o_invAJw, o_work, o_ddyAvg);
  nrs->qqt->startFinish("+", o_ddyAvg, nrs->fieldOffset);

  planarAvg(mesh, "xz", NUMBER_ELEMENTS_X, NUMBER_ELEMENTS_Y, NUMBER_ELEMENTS_Z, 6, nrs->fieldOffset, o_work);

  return o_work;
}

void userSource(double time)
{
  auto mesh = nrs->meshV;
  coriolis(mesh->Nlocal, nrs->fieldOffset, nrs->meshV->o_y, nrs->scalar->o_S, nrs->scalar->o_U, o_divTau, nrs->fluid->o_EXT);

  auto o_divTauY = o_divTau.slice(2 * nrs->fieldOffset , nrs->fieldOffset);
  platform->linAlg->axpby(mesh->Nlocal, -1.0, o_divTauY, 1.0, nrs->scalar->o_EXT, 0, 0);
}

void writeProfiles(double time, int tstep)
{
  const std::string fname = "profiles.dat";
  auto mesh = nrs->meshV;

  auto o_data = [&]()
  {
    const auto Nfields = 9;
    poolDeviceMemory<dfloat> o_work(Nfields * nrs->fieldOffset);
 
    size_t workOffset = 0; 
    o_work.copyFrom(avg->o_data(), 3 * nrs->fieldOffset, workOffset);

    workOffset += 3 * nrs->fieldOffset;
 
    auto o_gradY = o_work.slice(workOffset, 3 * nrs->fieldOffset);
    workOffset += 3 * nrs->fieldOffset;
    vecGradY(mesh->Nelements, 
             mesh->o_vgeo, 
             mesh->o_D, 
             nrs->fieldOffset, 
             mesh->o_invAJw, 
             avg->o_data(), 
             o_gradY);
 
    o_work.copyFrom(avg->o_data() + 3 * nrs->fieldOffset, 
                    3 * nrs->fieldOffset,
                    workOffset);
 
    planarAvg(mesh, 
              "xz", 
              NUMBER_ELEMENTS_X, 
              NUMBER_ELEMENTS_Y, 
              NUMBER_ELEMENTS_Z, 
              Nfields,
              nrs->fieldOffset, 
              o_work);

    return o_work;
  }();

  const auto Nfields = o_data.size() / nrs->fieldOffset;

  static std::vector<dfloat> xp;
  static std::vector<dfloat> yp;
  static std::vector<dfloat> zp;

  static pointInterpolation_t *interpolator = nullptr;
  if (!interpolator) {
    const auto np = (platform->comm.mpiRank() == 0) ? NUMBER_ELEMENTS_Y * mesh->N : 0;

    xp.resize(np);
    yp.resize(np);
    zp.resize(np);

    const auto yMin = platform->linAlg->min(mesh->Nlocal, mesh->o_y, platform->comm.mpiComm());
    const auto yMax = platform->linAlg->max(mesh->Nlocal, mesh->o_y, platform->comm.mpiComm());

    if (np) {
      const auto x0 = 0.0;
      const auto z0 = 0.0;

      for (int i = 0; i < np; i++) {
        xp[i] = x0;
        yp[i] = static_cast<dfloat>(i)/(np-1) * (yMax-yMin);
        zp[i] = z0;
      }
    }

    interpolator = new pointInterpolation_t(mesh, platform->comm.mpiComm());
    interpolator->setPoints(xp, yp, zp);
    interpolator->find(pointInterpolation_t::VerbosityLevel::Detailed);

    if (platform->comm.mpiRank() == 0) { 
      std::ofstream f(fname, std::ios::app);
      f << R"(#  time  y  <u>  <w>  <T>  <dudy>  <dwdy>  <dTdy>  <u'T'>  <w'T'>  <w'w'T'>)" << std::endl;
      f.close();
    }
  }

  poolDeviceMemory<dfloat> o_fields1D(Nfields * yp.size());

  interpolator->eval(Nfields, 
                     nrs->fieldOffset, 
                     o_data, 
                     yp.size(), 
                     o_fields1D);

  if (platform->comm.mpiRank() == 0) {
    std::vector<dfloat> fields1D(o_fields1D.size());
    o_fields1D.copyTo(fields1D);

    const auto offset = o_fields1D.size() / Nfields;
    const auto np = offset;

    const auto sep = "  ";
    std::ofstream f(fname, std::ios::app);

    for (int i = 0; i < np; i++) {
      f << std::scientific 
        << time << sep 
        << yp[i] << sep;

      // <u> <w> <T> <dudy> <dwdy> <dTdy>
      for(int ifld = 0; ifld < 6; ifld++) { 
        f << fields1D[i + ifld * offset] << sep;
      }

      // <u'T'>
      f << fields1D[i + 6 * offset] - (fields1D[i + 0 * offset] * fields1D[i + 2 * offset]) << sep;
      // <w'T'>
      f << fields1D[i + 7 * offset] - (fields1D[i + 1 * offset] * fields1D[i + 2 * offset]) << sep;
      // <w'w'T'>
      f << fields1D[i + 8 * offset] - (fields1D[i + 1 * offset] * fields1D[i + 1 * offset] *
                                       fields1D[i + 2 * offset]) << sep;

      f << std::endl;
    }
    f.close();
  }
}

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
  setupAide& options = platform->options;

  dfloat cond;
  options.getArgs("SCALAR00 DIFFUSIVITY", cond);
  const dfloat g = 9.81;
  const dfloat omega = 7.2921159e-5;

  GACC = LREF * g / (UREF * UREF);
  T0S = TS0 / TREF;
  tREF = LREF / UREF;
  SCOOLRATE = SCR * tREF / TREF / 3600;
  
  kernelInfo.define("p_fcor")      = 2 * omega * LREF / UREF * sin(NLAT * M_PI / 180);
  kernelInfo.define("p_bcor")      = 2 * omega * LREF / UREF * cos(NLAT * M_PI / 180);
  kernelInfo.define("p_gacc")      = GACC;
  kernelInfo.define("p_cond")      = cond;
  kernelInfo.define("p_TsGrad")    = ILSTRENGTH * LREF / TREF;
  kernelInfo.define("p_T0s")       = T0S;
  kernelInfo.define("p_sCoolRate") = SCOOLRATE;
  kernelInfo.define("p_YLEN")      = YLEN;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "nlat", NLAT);
  platform->par->extract("casedata", "uref", UREF);
  platform->par->extract("casedata", "lref", LREF);
  platform->par->extract("casedata", "tref", TREF);
  platform->par->extract("casedata", "ts0", TS0);
  platform->par->extract("casedata", "scr", SCR);
  platform->par->extract("casedata", "ilstrength", ILSTRENGTH);
  platform->par->extract("casedata", "number_elements_x", NUMBER_ELEMENTS_X);
  platform->par->extract("casedata", "number_elements_y", NUMBER_ELEMENTS_Y);
  platform->par->extract("casedata", "number_elements_z", NUMBER_ELEMENTS_Z);
  platform->par->extract("casedata", "xlen", XLEN);
  platform->par->extract("casedata", "ylen", YLEN);
  platform->par->extract("casedata", "zlen", ZLEN);

  platform->par->extract("casedata", "z0", Z0);
  platform->par->extract("casedata", "z1", Z1);

  platform->par->extract("casedata", "betam", BETAM);
  platform->par->extract("casedata", "betah", BETAH);
  platform->par->extract("casedata", "kappa", KAPPA);
  platform->par->extract("casedata", "zwall", ZWALL);

  platform->par->extract("casedata", "startTimeStatistics", startTimeStatistics);
}

void UDF_Setup()
{
  auto mesh = nrs->meshV;

  o_divTau.resize(3 * nrs->fieldOffset);

  platform->app->bc->o_usrwrk.resize(5);

  nrs->userSource = &userSource;

  platform->options.setArgs("VERBOSE SOLVER INFO", "TRUE");
  platform->options.setArgs("RUNTIME STATISTICS FREQUENCY", "5000");

  platform->options.getArgs("MAX DT", maxDt0);
  if (maxDt0 > 0) {
    const double maxDt = 0.25 * maxDt0;
    if (platform->comm.mpiRank() == 0) {
      printf("\n"
             "reseting MAX DT = %g\n",
             maxDt);
    }
    platform->options.setArgs("MAX DT", to_string_f(maxDt));
  }

  {
    std::vector< tavg::field > tavgFields;

    deviceMemory<dfloat> o_u(nrs->scalar->o_U.slice(0 * nrs->fieldOffset , nrs->fieldOffset));
    deviceMemory<dfloat> o_w(nrs->scalar->o_U.slice(2 * nrs->fieldOffset , nrs->fieldOffset));
    deviceMemory<dfloat> o_temp(nrs->scalar->o_S.slice(nrs->scalar->fieldOffsetScan[0], nrs->scalar->fieldOffset()));

    tavgFields.push_back({"ux", std::vector{o_u}});
    tavgFields.push_back({"uz", std::vector{o_w}});
    tavgFields.push_back({"T", std::vector{o_temp}});

    tavgFields.push_back({"uxux", std::vector{o_u, o_u}});
    tavgFields.push_back({"uzuz", std::vector{o_w, o_w}});
    tavgFields.push_back({"uzuzT", std::vector{o_w, o_w, o_temp}});

    avg = std::make_unique<tavg>(nrs->fluid->fieldOffset, tavgFields);
  }

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    platform->linAlg->rescale(0.0, XLEN, mesh->o_x, platform->comm.mpiComm());
    platform->linAlg->rescale(0.0, YLEN, mesh->o_y, platform->comm.mpiComm());
    platform->linAlg->rescale(0.0, ZLEN, mesh->o_z, platform->comm.mpiComm());

    auto [x, y, z] = mesh->xyzHost();
    std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
    std::vector<dfloat> T(mesh->Nlocal);

    for (int n = 0; n < mesh->Nlocal; n++) {
      auto temp = (T0S - 1.);
      if (y[n] <= 0.5) { 
         const auto kx  = 23;
         const auto kz  = 13;
         const auto alpha = kx * 2*M_PI / XLEN;
         const auto beta  = kz * 2*M_PI / ZLEN;
         const auto epsT  = 0.1 / TREF;

         temp += epsT * sin(alpha * x[n]) * sin(beta * z[n]);
      } else {
         const auto ts_grad = ILSTRENGTH * LREF/TREF;
         temp += ts_grad * (y[n] - 1.);
      } 

      U[n + 0 * nrs->fieldOffset] = 1;
      T[n] = temp;
    }
    nrs->scalar->o_U.copyFrom(U.data(), U.size());
    nrs->scalar->o_S.copyFrom(T.data(), T.size());
  }
}

void UDF_ExecuteStep(double time, int tstep)
{
  auto restoreDt = [&]() 
  {
    static auto firstTime = true;
    if (maxDt0 > 0 && time > 100 && firstTime) {
      if (platform->comm.mpiRank() == 0) {
        printf("restore original MAX DT = %g\n", maxDt0);
      }
      platform->options.setArgs("MAX DT", to_string_f(maxDt0));
      firstTime = false;
    }
  };

  restoreDt();

  auto mesh = nrs->meshV;

  if (nrs->timeStepConverged && time >= startTimeStatistics) {
    avg->run(time);
  }

  auto o_avg = planarAverage();

  auto avgUWallValues = [&]() 
  {
    std::vector<int> bIdWall{2};

    static deviceMemory<int> o_bid;
    if (!o_bid.isInitialized()) {
      o_bid.resize(1);
      o_bid.copyFrom(bIdWall);
    }

    static dfloat surArea = -1;
    if (surArea < 0) {
      poolDeviceMemory<dfloat> o_one(mesh->Nlocal);
      platform->linAlg->fill(o_one.size(), 1.0, o_one);
      surArea = mesh->surfaceAreaMultiplyIntegrate(o_bid, o_one);
    }
   
    std::vector<dfloat> avgUWallValues(mesh->dim);
    for (int i = 0; i < mesh->dim; i++) {
      auto o_u = o_avg.slice(i * nrs->fieldOffset, mesh->Nlocal);
      avgUWallValues[i] = mesh->surfaceAreaMultiplyIntegrate(o_bid, o_u) / surArea;
    }

    return avgUWallValues;
  }();

  enum wall { thts = 0, magU = 1, temp = 2, uTau = 3, thetaTau =4 };
  auto wallData = [&]()
  {
    std::vector<dfloat> wallData(platform->app->bc->o_usrwrk.size());
 
    wallData.at(wall::thts) = T0S + SCOOLRATE * time;
    wallData[wall::magU] = std::sqrt(avgUWallValues[0] * avgUWallValues[0] + avgUWallValues[1] * avgUWallValues[1]); 
    wallData[wall::temp] = avgUWallValues[2];
 
    const dfloat diffTempWall = fabs(wallData[wall::temp]  - (wallData[wall::thts]  - 1.));
    findUThetaTau(wallData[wall::magU], diffTempWall, wallData[wall::uTau], wallData[wall::thetaTau]);

    return wallData;
  }();
  platform->app->bc->o_usrwrk.copyFrom(wallData);

  const auto rLength = [&]() 
  {
    if (wallData[wall::uTau] > 0)
      return KAPPA * GACC * wallData[wall::thetaTau] / std::pow(wallData[wall::uTau], 2);
    
    return 1e5;
  }();

  const auto scale = [&]()
  {
    const auto factru = (1. + BETAM * ZWALL * rLength) / KAPPA / ZWALL;
    return 1. / (factru * factru);
  }();

  auto o_ddyAvg = o_avg.slice(3 * nrs->fieldOffset, 3 * nrs->fieldOffset); 
  poolDeviceMemory<dfloat> o_visMF(nrs->fieldOffset);
  visMF(mesh->Nlocal, 
        nrs->fieldOffset, 
        static_cast<dfloat>(scale), 
        o_ddyAvg, 
        o_visMF);

#if 0
    platform->lingAlg->fill(mesh->Nlocal, 0.0, o_visMF);
#endif

  divStress(mesh->Nelements,
            nrs->fieldOffset,
            mesh->o_invAJw,
            mesh->o_vgeo,
            mesh->o_D,
            o_visMF,
            o_ddyAvg,
            o_divTau);

  nrs->qqt->startFinish("+", o_divTau, nrs->fieldOffset);

  o_ddyAvg.clear();
  o_avg.clear();

  if (nrs->checkpointStep) {
    if (platform->comm.mpiRank() == 0) {
      printf("uAvgWall: %g  wAvgWall: %g  magUWall: %g  tempAvgWall: %g\n"
             "uTau: %g  thetaTau: %g  rLength: %g\n",
             avgUWallValues[0],
             avgUWallValues[1],
             wallData[wall::magU],
             avgUWallValues[2],
             wallData[wall::uTau],
             wallData[wall::thetaTau],
             rLength);
    }
  }

  if (nrs->lastStep) writeProfiles(time, tstep);
}
