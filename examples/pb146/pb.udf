#ifdef __okl__

void udfDirichlet(bcData *bc)
{
  if (isField("fluid velocity")) {
    bc->uxFluid = 0.0;
    bc->uyFluid = 0.0;
    bc->uzFluid = 1.0;
  } else if (isField("fluid pressure")) {
    const dfloat iU0delta = 20.0;
    const dfloat un = bc->uxFluid * bc->nx + bc->uyFluid * bc->ny + bc->uzFluid * bc->nz;
    const dfloat s0 = 0.5 * (1.0 - tanh(un * iU0delta));
    bc->pFluid = -0.5 * (bc->uxFluid * bc->uxFluid + bc->uyFluid * bc->uyFluid + bc->uzFluid * bc->uzFluid) * s0;
  } else if (isField("scalar temperature")) {
    bc->sScalar = 0.0;
  }
}

void udfNeumann(bcData *bc)
{
  bc->fluxScalar = 1.0;
}

#endif

void UDF_Setup() 
{
  auto mesh = nrs->meshV;

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    std::vector<dfloat> U(nrs->fluid->fieldOffsetSum, 0.0);
    for(int n = 0; n < mesh->Nlocal; n++) {
      U[n + 2 * nrs->fieldOffset] = 1;
    }
    nrs->fluid->o_U.copyFrom(U.data(), U.size());
  }
}

void UDF_ExecuteStep(double time, int tstep) 
{
}
