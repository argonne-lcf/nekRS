#ifdef __okl__

#include "hist.okl"

void udfDirichlet(bcData *bc)
{
  bc->sScalar = 1 - bc->z;
}

#endif

static deviceMemory<float> o_hist;

void userf(double time)
{
  auto mesh = nrs->meshV;
  auto o_zEXT = nrs->fluid->o_EXT + 2*nrs->fieldOffset;
  platform->linAlg->axpby(mesh->Nlocal, 1.0, nrs->scalar->o_S, 0.0, o_zEXT); 
}

void UDF_Setup()
{
  auto mesh = nrs->meshV;
  nrs->userSource = &userf;

  const auto nBin = 256;
  o_hist.resize(nBin);

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    auto [x, y, z] = mesh->xyzHost();
    std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
    std::vector<dfloat> S(mesh->Nlocal);
    for(int n = 0; n < mesh->Nlocal; n++) { 
      S[n] = 1 - z[n];
    }
    nrs->fluid->o_U.copyFrom(U.data(), U.size());
    nrs->scalar->o_S.copyFrom(S.data(), S.size());
  }

}

void UDF_ExecuteStep(double time, int tstep)
{
  auto mesh = nrs->meshV;

  auto weightedHistogram = [&](auto uMin, auto uMax, auto Nlocal, const auto& o_wght, const auto& o_u, auto& o_out) 
  {
    const int N = o_out.size();
    nekrsCheck(N > 2048, MPI_COMM_SELF, EXIT_FAILURE, "%s\n", "N > 2048");
 
    const dfloat du = N / std::abs(uMax - uMin);
 
    hist(Nlocal, N, uMin, du, o_wght, o_u, o_out);
  };

  weightedHistogram(0.0, 1.0, mesh->Nlocal, mesh->o_Jw, nrs->scalar->o_S, o_hist); 

  if (nrs->checkpointStep) {
    std::vector<float> hist(o_hist.size());
    o_hist.copyTo(hist);
    MPI_Allreduce(MPI_IN_PLACE, hist.data(), hist.size(), MPI_FLOAT, MPI_SUM, platform->comm.mpiComm());
    if (platform->comm.mpiRank() == 0) {
      std::ofstream outputFile("pdf_scalar00.dat");
      for (auto& entry : hist) outputFile << entry / mesh->volume << std::endl;
      outputFile.close();
    }

    nrs->copyToNek(time, tstep);
    nek::userchk();
  }
}
