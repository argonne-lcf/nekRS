
//
// nekRS User Defined File
//
#include "udf.hpp"
#include "ci.inc"

static dfloat P_U0;
static dfloat P_V0;
static dfloat P_OMEGA;
static dfloat P_SCALE;

#ifdef __okl__

void exact(dfloat *uu, dfloat *vv, dfloat *ww, dfloat xx, dfloat yy, dfloat zz, double time, dfloat visc)
{
  const dfloat a[10] = {-.2, -.2, .25, 0.0, 0, 0, 0, 0, 0, 0};
  const dfloat cpsi[10] = {0, 5, 3, 4, 0, 0, 0, 0, 0, 0};

  const dfloat aa = cpsi[1] * cpsi[1];
  const dfloat arg = -visc * time * aa; // domain is [0:2pi]
  const dfloat e = exp(arg);

  const dfloat x = xx - p_U0 * time;
  const dfloat y = yy - p_V0 * time;
  const dfloat z = 0.0;

  const dfloat sx = sin(cpsi[1] * x);
  const dfloat cx = cos(cpsi[1] * x);
  const dfloat sy = sin(cpsi[1] * y);
  const dfloat cy = cos(cpsi[1] * y);
  dfloat u = a[0] * cpsi[1] * cy;
  dfloat v = a[1] * cpsi[1] * sx;

  for (int k = 2; k <= 5; ++k) {

    const dfloat s1x = sin(cpsi[0 + 2 * (k - 1)] * x);
    const dfloat c1x = cos(cpsi[0 + 2 * (k - 1)] * x);
    const dfloat s2x = sin(cpsi[1 + 2 * (k - 1)] * x);
    const dfloat c2x = cos(cpsi[1 + 2 * (k - 1)] * x);

    const dfloat s1y = sin(cpsi[0 + 2 * (k - 1)] * y);
    const dfloat c1y = cos(cpsi[0 + 2 * (k - 1)] * y);
    const dfloat s2y = sin(cpsi[1 + 2 * (k - 1)] * y);
    const dfloat c2y = cos(cpsi[1 + 2 * (k - 1)] * y);

    const dfloat c1 = cpsi[0 + 2 * (k - 1)];
    const dfloat c2 = cpsi[1 + 2 * (k - 1)];

    if (k == 2) {
      u = u + a[0 + 2 * (k - 1)] * s1x * c2y * c2;
      v = v - a[0 + 2 * (k - 1)] * c1x * s2y * c1;
      u = u - a[1 + 2 * (k - 1)] * s2x * c1y * c1;
      v = v + a[1 + 2 * (k - 1)] * c2x * s1y * c2;
    }

    if (k == 3) {
      u = u - a[0 + 2 * (k - 1)] * s1x * c2y * c2;
      v = v + a[0 + 2 * (k - 1)] * c1x * s2y * c1;
      u = u - a[1 + 2 * (k - 1)] * c2x * c1y * c1;
      v = v - a[1 + 2 * (k - 1)] * s2x * s1y * c2;
    }

    if (k == 4) {
      u = u + a[0 + 2 * (k - 1)] * c1x * c2y * c2;
      v = v + a[0 + 2 * (k - 1)] * s1x * s2y * c1;
      u = u + a[1 + 2 * (k - 1)] * c2x * c1y * c1;
      v = v + a[1 + 2 * (k - 1)] * s2x * s1y * c2;
    }

    if (k == 5) {
      u = u - a[0 + 2 * (k - 1)] * s1x * c2y * c2;
      v = v + a[0 + 2 * (k - 1)] * c1x * s2y * c1;
      u = u - a[1 + 2 * (k - 1)] * s2x * c1y * c1;
      v = v + a[1 + 2 * (k - 1)] * c2x * s1y * c2;
    }
  }
  (*uu) = u * e + p_U0;
  (*vv) = v * e + p_V0;
  (*ww) = 0.0;
}

// Boundary conditions
void udfDirichlet(bcData *bc)
{
  if (isField("fluid velocity")) {
    bc->uxFluid = bc->uxFluidInt;
    bc->uyFluid = bc->uyFluidInt;
    bc->uzFluid = bc->uzFluidInt;
  } else if (isField("scalar ps1")) { 
    bc->sScalar = bc->sScalarInt;
  } else if (isField("scalar ps2")) { 
    dfloat u, v, w;
    exact(&u, &v, &w, bc->x, bc->y, bc->z, bc->time, p_visc);
    bc->sScalar = u;
  }
}

@kernel void exactUVW(const dlong Ntotal,
                      const dlong offset,
                      const double time,
                      @ restrict const dfloat *X,
                      @ restrict const dfloat *Y,
                      @ restrict const dfloat *Z,
                      @ restrict dfloat *U)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    dfloat u, v, w;
    const dfloat x = X[n];
    const dfloat y = Y[n];
    const dfloat z = Z[n];
    exact(&u, &v, &w, x, y, z, time, p_visc);
    U[n + 0 * offset] = u;
    U[n + 1 * offset] = v;
    U[n + 2 * offset] = w;
  }
}

void dP(dfloat *dpdx, dfloat xx, dfloat yy, dfloat zz, dfloat time, dfloat visc)
{
  const dfloat e = exp(-50 * time * visc);

  const dfloat x = xx - p_U0 * time;
  const dfloat y = yy - p_V0 * time;

  dfloat dp = e / 64.0;
  dp *= -96 * sin(6 * x) + 64 * sin(2 * x - 4 * y) - 64 * sin(2 * x + 4 * y) - 64 * sin(8 * x - 4 * y) +
        64 * sin(8 * x + 4 * y) - 12 * cos(3 * x - 9 * y) + 108 * cos(3 * x - y) + 108 * cos(3 * x + y) -
        12 * cos(3 * x + 9 * y) + 160 * cos(5 * x - 5 * y) - 160 * cos(5 * x + 5 * y);
  (*dpdx) = dp;
}

@kernel void dpdx(const dlong Ntotal,
                  const dfloat time,
                  @ restrict const dfloat *X,
                  @ restrict const dfloat *Y,
                  @ restrict const dfloat *Z,
                  @ restrict dfloat *FS)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    dfloat dpdx;
    const dfloat x = X[n];
    const dfloat y = Y[n];
    const dfloat z = Z[n];
    dP(&dpdx, x, y, z, time, p_visc);
    FS[n] = -dpdx;
  }
}

@kernel void userMeshVelocity(const dlong Ntotal,
                              const dlong offset,
                              @ restrict const dfloat *x,
                              @ restrict const dfloat *y,
                              @ restrict const dfloat *z,
                              @ restrict dfloat *W)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    const dfloat xc = (x[n] - p_pi);
    const dfloat yc = (y[n] - p_pi);
    const dfloat rc = sqrt(xc * xc + yc * yc);
    const dfloat thv = atan2(yc, xc);
    W[n + 0 * offset] = p_omega * rc * sin(thv);
    W[n + 1 * offset] = -p_omega * rc * cos(thv);
    W[n + 2 * offset] = 0.0;
  }
}

#endif

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
  kernelInfo.define("p_pi") = M_PI;
  kernelInfo.define("p_omega") = P_OMEGA;
  kernelInfo.define("p_U0") = P_U0;
  kernelInfo.define("p_V0") = P_V0;

  dfloat viscosity = NAN;
  platform->options.getArgs("FLUID VISCOSITY", viscosity);
  kernelInfo.define("p_visc") = viscosity;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) {
    ciSetup(comm, options);
  }
  dfloat viscosity = NAN;
  options.getArgs("FLUID VISCOSITY", viscosity);

  platform->par->extract("casedata", "p_u0", P_U0);
  platform->par->extract("casedata", "p_v0", P_V0);
  platform->par->extract("casedata", "p_omega", P_OMEGA);
  platform->par->extract("casedata", "p_scale", P_SCALE);
  P_OMEGA *= M_PI;
  P_SCALE *= M_PI;

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    *nek::ptr<double>("p_u0") = P_U0;
    *nek::ptr<double>("p_v0") = P_V0;
    *nek::ptr<double>("p_omega") = P_OMEGA;
    *nek::ptr<double>("p_visc") = viscosity;
    *nek::ptr<double>("p_scale") = P_SCALE;
  }
}

bool timeStepConverged(int stage)
{
  if (nrs->neknek->nEXT() == 1 || nrs->neknek->multirate()) {
    return true;
  }

  // do one corrector step
  return stage > 1;
}

void userq(double time)
{
  auto mesh = nrs->meshV;
  dpdx(mesh->Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, nrs->scalar->o_EXT);
}

void UDF_Setup()
{
  nrs->userConvergenceCheck = timeStepConverged;
  nrs->userSource = &userq;
}

void UDF_ExecuteStep(double time, int tstep)
{
  auto mesh = nrs->meshV;
  if (platform->options.compareArgs("MOVING MESH", "TRUE")) {
    userMeshVelocity(mesh->Nlocal, nrs->fieldOffset, mesh->o_x, mesh->o_y, mesh->o_z, nrs->geom->o_U);
  }

  constexpr int nStepAnalytical = 5;
  if (tstep <= nStepAnalytical) {
    exactUVW(mesh->Nlocal, nrs->fieldOffset, time, mesh->o_x, mesh->o_y, mesh->o_z, nrs->fluid->o_U);
    nrs->scalar->o_S.copyFrom(nrs->fluid->o_U, nrs->fieldOffset);
  }
 
  if (ciMode) {
    ciTestErrors(nrs, time, tstep);
  }
}
