static dfloat Re_tau;
static dfloat zLength;
static dfloat dt0;

#include "ci.inc"

#ifdef __okl__

#endif

void userf(double time)
{
  auto mesh = nrs->meshV;
  dfloat mue, rho;
  platform->options.getArgs("FLUID VISCOSITY", mue);
  platform->options.getArgs("FLUID DENSITY", rho);
  const dfloat RE_B = rho / mue;
  const dfloat DPDZ = 4 * (2 * Re_tau / RE_B) * (2 * Re_tau / RE_B);

  auto o_FUz = nrs->fluid->o_EXT + 2 * nrs->fluid->fieldOffset;
  platform->linAlg->fill(mesh->Nlocal, DPDZ, o_FUz);
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "re_tau", Re_tau);
  platform->par->extract("casedata", "zlength", zLength);

  options.getArgs("CI-MODE", ciMode);
  if (ciMode) {
    ciSetup(comm, options);
  }

  platform->options.getArgs("DT", dt0);
}

void UDF_Setup()
{
  auto mesh = nrs->meshV;

  if (platform->options.compareArgs("CONSTANT FLOW RATE", "FALSE")) {
    // assign function pointer to drive flow by constant mean pressure gradient
    nrs->userSource = &userf;
  }

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    platform->linAlg->rescale(0.0, zLength, mesh->o_z, platform->comm.mpiComm());

    auto [x, y, z] = mesh->xyzHost();

    auto rand = randomVector<dfloat>(mesh->Nlocal, -1.0, 1.0, true);

    std::vector<dfloat> U(mesh->dim * nrs->fluid->fieldOffset, 0.0);

    for (int n = 0; n < mesh->Nlocal; n++) {
      const auto R = 0.5;

      const auto xr = x[n] / R;
      const auto yr = y[n] / R;
      const auto zo = 2 * M_PI * z[n] / zLength;

      auto rr = xr * xr + yr * yr;
      rr = (rr > 0) ? sqrt(rr) : 0.0;
      const auto th = atan2(y[n], x[n]);

      auto uz = 6/5. * (1 - pow(rr, 6));

      // add a wiggly shear layer near the wall
      const auto amp_z    = 0.35;  // Fraction of 2pi for z-based phase modification
      const auto freq_z   = 4.0;   // Number of wiggles in axial- (z-) direction
      const auto freq_t   = 9.0;   // Frequency of wiggles in azimuthal-direction
      const auto amp_clip = 0.2;   // Clipped amplitude
      const auto amp_tht  = 5.0;   //  Amplification factor for clipped sine function
      const auto blt      = 0.07;  // Fraction of boundary layer with momentum deficit

      const auto phase_z = amp_z * 2 * M_PI * sin(freq_z * zo);

      auto amp_sin = amp_tht * sin(freq_t * th + phase_z);
      if (amp_sin >  amp_clip) amp_sin =  amp_clip;
      if (amp_sin < -amp_clip) amp_sin = -amp_clip;
      if (rr > (1 - blt)) uz += amp_sin;

      U[n + 0 * nrs->fluid->fieldOffset] = 0.05 * pow(rand[n], 2);
      U[n + 1 * nrs->fluid->fieldOffset] = 0.1  * pow(rand[n], 3);
      U[n + 2 * nrs->fluid->fieldOffset] = uz + 0.01 * rand[n];
    }

    nrs->fluid->o_U.copyFrom(U.data(), U.size());
  }

}

void UDF_ExecuteStep(double time, int tstep)
{
  if (tstep < 5) {
    platform->options.setArgs("DT", to_string_f(0.25 * dt0));
  } else {
    platform->options.setArgs("DT", to_string_f(dt0));
  }

  if (nrs->lastStep) {
    if (ciMode) {
      ciTestErrors(nrs, time, tstep);
    }
  }
}
