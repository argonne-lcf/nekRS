#include "udf.hpp"

deviceMemory<dfloat> o_qcriterion;

static constexpr dfloat L = 2*M_PI;   // domain (box) length
static constexpr dfloat l = 0.19 * L; // integral length scale (given by method) 
static dfloat uPrime;
static dfloat A;

#ifdef __okl__

@kernel void kEnergy(const dlong Ntotal, 
                     const dlong offset,
                     @ restrict const dfloat *U, 
                     @ restrict dfloat *k)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    const dfloat u = U[n + 0 * offset];
    const dfloat v = U[n + 1 * offset];
    const dfloat w = U[n + 2 * offset];
    k[n + 0 * offset] = 0.5 * (u*u + v*v + w*w);
  }
}

#endif

deviceMemory<dfloat> implicitForcing(dfloat time)
{
  auto mesh = nrs->meshV;

  poolDeviceMemory<dfloat> o_F(mesh->Nlocal);
  platform->linAlg->fill(o_F.size(), -A, o_F);
  return o_F;
}

// according to Eq(7) in https://doi.org/10.1063/1.4944629
void linearForcing(dfloat time)
{
  //uPrime = 1 / l;
  const auto G = 10.0; 
  const auto invTau0 = uPrime / l;
  const auto k0 = 1.5 * uPrime * uPrime;

  auto mesh = nrs->meshV;

  auto avg = [&](auto o_u)
  { 
    return platform->linAlg->innerProd(mesh->Nlocal, mesh->o_Jw, o_u, platform->comm.mpiComm()) / mesh->volume;
  };

  std::vector<dfloat> Uavg(mesh->dim);
  Uavg[0] = avg(nrs->fluid->o_U.slice(0 * nrs->fieldOffset));
  Uavg[1] = avg(nrs->fluid->o_U.slice(1 * nrs->fieldOffset));
  Uavg[2] = avg(nrs->fluid->o_U.slice(2 * nrs->fieldOffset));

  auto o_Uprime = [&]() 
  {
    poolDeviceMemory<dfloat> o_Uprime(nrs->fluid->fieldOffsetSum);
    o_Uprime.copyFrom(nrs->fluid->o_U, o_Uprime.size());
    for(int i = 0; i < mesh->dim; i++) {
      platform->linAlg->add(mesh->Nlocal, -Uavg[i], o_Uprime.slice(i * nrs->fieldOffset)); 
    }
    return o_Uprime; 
  }();

  const auto epsVolAvg = [&]()
  {
    dfloat mue, rho;
    platform->options.getArgs("FLUID VISCOSITY", mue);
    platform->options.getArgs("FLUID DENSITY", rho);
    const auto nu = mue / rho;

    auto o_gradU = opSEM::strongGradVec(mesh, nrs->fieldOffset, nrs->fluid->o_U);

    static poolDeviceMemory<dfloat> o_invAJwJw;
    if (!o_invAJwJw.isInitialized()) {
      o_invAJwJw.resize(mesh->Nlocal);
      platform->linAlg->axmyz(mesh->Nlocal, 1.0, mesh->o_invAJw, mesh->o_Jw, o_invAJwJw);
    } 
    platform->linAlg->axmyMany(mesh->Nlocal, mesh->dim * mesh->dim, nrs->fieldOffset, 0, 1.0, mesh->o_invAJw, o_gradU);
    nrs->qqt->startFinish("+", o_gradU, nrs->fieldOffset);
 
    poolDeviceMemory<dfloat> o_eps(mesh->Nlocal);
    platform->linAlg->magSqrTensor(mesh->Nlocal, nrs->fieldOffset, o_gradU, o_eps);
    platform->linAlg->scale(mesh->Nlocal, nu, o_eps);
    return avg(o_eps);
  }();

  const auto kVolAvg = [&]()
  {
    poolDeviceMemory<dfloat> o_k(nrs->fieldOffset);
    kEnergy(mesh->Nlocal, nrs->fieldOffset, o_Uprime, o_k);
    return avg(o_k);
  }();

  A = (epsVolAvg - G*(kVolAvg  - k0) * invTau0) / (2 * kVolAvg);

  // add explicit contribtion
  for(int i = 0; i < mesh->dim; i++) {
    auto o_ext = nrs->fluid->o_EXT.slice(i * nrs->fieldOffset, mesh->Nlocal);
    platform->linAlg->fill(mesh->Nlocal, -A*Uavg[i], o_ext); 
  }

  if (platform->comm.mpiRank() == 0) {
    const auto uRms = std::sqrt(2./3 * kVolAvg);
    std::cout << "A=" << A 
              << "  k=" << kVolAvg 
              << "  k0=" << k0 
              << "  l= " << std::pow(uRms,3) / epsVolAvg 
              << "  l0= " << l 
              << std::endl;
  }
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "uprime", uPrime);

  dfloat mue;
  platform->options.getArgs("FLUID VISCOSITY", mue);
  const auto Re_lambda = 1/mue;

  dfloat rho;
  platform->options.getArgs("FLUID DENSITY", rho);

  const auto Re_l = std::pow(Re_lambda,2) / (rho * 15 * uPrime * l);
  platform->options.setArgs("FLUID VISCOSITY", to_string_f(1 / Re_l));
}

void UDF_Setup()
{
  auto mesh = nrs->meshV;

  nrs->userSource = &linearForcing;
  nrs->fluid->userImplicitLinearTerm = &implicitForcing;

  platform->linAlg->rescale(-L/2, L/2, mesh->o_x, platform->comm.mpiComm());
  platform->linAlg->rescale(-L/2, L/2, mesh->o_y, platform->comm.mpiComm());
  platform->linAlg->rescale(-L/2, L/2, mesh->o_z, platform->comm.mpiComm());

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    const auto eps = 0.1;
    const auto kx = 23.0;
    const auto kz = 13.0;
    const auto alpha = kx;
    const auto beta = kz;

    auto [x, y, z] = mesh->xyzHost();

    std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
    for (int n = 0; n < mesh->Nlocal; n++) {
      U[n + 0 * nrs->fieldOffset] =  eps * beta  * sin(alpha * x[n]) * cos(beta * z[n]);
      U[n + 1 * nrs->fieldOffset] =  eps         * sin(alpha * x[n]) * sin(beta * z[n]);
      U[n + 2 * nrs->fieldOffset] = -eps * alpha * cos(alpha * x[n]) * sin(beta * z[n]);
    }
    nrs->fluid->o_U.copyFrom(U.data(), U.size());
  }
  o_qcriterion.resize(mesh->Nlocal);
  nrs->addUserCheckpointField("scalar00", std::vector<deviceMemory<dfloat>>{o_qcriterion});
}

void UDF_ExecuteStep(double time, int tstep)
{
   if (nrs->checkpointStep) {
     nrs->Qcriterion(o_qcriterion);
   }
}
