#include "lowMach.hpp"

#include "ci.inc"

static dfloat XLEN;
static dfloat YLEN;
static dfloat ZLEN;

static dfloat P_GAMMA;
static dfloat P_DELTA;
static dfloat P_OMEGA;
static dfloat P_AMP;
static dfloat P_ROT;

deviceMemory<dfloat> o_beta;
deviceMemory<dfloat> o_kappa;

#ifdef __okl__

#include "mv_cyl.oudf"

#endif

void userq(double time)
{
  lowMach::dpdt(nrs->scalar->o_EXT);
}

void qtl(double time)
{
  lowMach::qThermalSingleComponent(time);
}

void uservp(double time)
{
  auto mesh = nrs->meshV;

  fillProp(mesh->Nelements,
           nrs->fluid->fieldOffset,
           nrs->scalar->fieldOffset(),
           nrs->p0th[0],
           nrs->scalar->o_S,
           nrs->fluid->o_prop,
           nrs->scalar->o_prop,
           o_beta,
           o_kappa);

  if (!platform->options.compareArgs("GEOM SOLVER", "NONE")) {
    // moving mesh parameters
    const dfloat nu = 1.0;
    platform->linAlg->fill(nrs->meshV->Nlocal, nu, nrs->geom->o_prop);
  }
}

/* UDF Functions */

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
  kernelInfo.define("p_PI") = M_PI;
  kernelInfo.define("p_OMEGA") = P_OMEGA;
  kernelInfo.define("p_AMP") = P_AMP;
  kernelInfo.define("p_ROT") = P_ROT;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) {
    ciSetup(comm, options);
  }
  platform->par->extract("casedata", "xlen", XLEN);
  platform->par->extract("casedata", "ylen", YLEN);
  platform->par->extract("casedata", "zlen", ZLEN);
  platform->par->extract("casedata", "p_gamma", P_GAMMA);
  platform->par->extract("casedata", "p_omega", P_OMEGA);
  platform->par->extract("casedata", "p_amp", P_AMP);
  platform->par->extract("casedata", "p_rot", P_ROT);
  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    *nek::ptr<double>("xlen") = XLEN;
    *nek::ptr<double>("ylen") = YLEN;
    *nek::ptr<double>("zlen") = ZLEN;

    *nek::ptr<double>("p_gamma") = P_GAMMA;
    *nek::ptr<double>("p_omega") = P_OMEGA;
    *nek::ptr<double>("p_amp") = P_AMP;
    *nek::ptr<double>("p_rot") = P_ROT;
  }
}

void UDF_Setup()
{
  nrs->userProperties = &uservp;
  nrs->userSource = &userq;

  o_beta.resize(nrs->fieldOffset);
  o_kappa.resize(nrs->fieldOffset);

  // alphaRef := p0thRef/(rhoRef * cpRef * TRef)
  // translates to (gammaRef - 1)/gammaRef in case of an ideal gas
  auto alphaRef = (P_GAMMA - 1.0) / P_GAMMA;

  lowMach::setup(alphaRef, o_beta, o_kappa);
  nrs->userDivergence = &qtl;
}

void UDF_ExecuteStep(double time, int tstep)
{
  auto mesh = nrs->meshV;

  *nek::ptr<double>("dp0thdt") = nrs->dp0thdt; // required for CI testing, not copied by default

  if (platform->options.compareArgs("GEOM SOLVER", "NONE")) {

    // rotate back into reference frame
    poolDeviceMemory<dfloat> o_height(mesh->Nlocal);    
    platform->linAlg->axpbyz(mesh->Nlocal,
                             -1.0 * std::sin(P_ROT),
                             mesh->o_x,
                             std::cos(P_ROT),
                             mesh->o_y,
                             o_height);

    const dfloat hmin = platform->linAlg->min(mesh->Nlocal, o_height, platform->comm.mpiComm());
    const dfloat hmax = platform->linAlg->max(mesh->Nlocal, o_height, platform->comm.mpiComm());

    userMeshVelocity(mesh->Nelements,
                     nrs->fieldOffset,
                     hmin,
                     hmax,
                     time,
                     o_height,
                     nrs->geom->o_U);
  }

  if (nrs->checkpointStep) {
    nrs->copyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) {
    ciTestErrors(nrs, time, tstep);
  }
}
