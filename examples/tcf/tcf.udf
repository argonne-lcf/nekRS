deviceMemory<dfloat> o_qcriterion;

#ifdef __okl__

void udfDirichlet(bcData *bc)
{
  // U = omega x r
  bc->uxFluid = -bc->y;
  bc->uyFluid = bc->x;
  bc->uzFluid = 0.0;
}

@kernel void magSqr(const dlong Ntotal, const dlong offset, @ restrict const dfloat *U, @ restrict dfloat *uSqr)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    if (n < Ntotal) {
      uSqr[n + 0 * offset] = U[n + 0 * offset] * U[n + 0 * offset] + U[n + 1 * offset] * U[n + 1 * offset] +
                             U[n + 2 * offset] * U[n + 2 * offset];
    }
  }
}

#endif

void UDF_Setup0(MPI_Comm comm, setupAide &options) {}

void UDF_Setup()
{
  auto mesh = nrs->meshV;

  auto [x, y, z] = mesh->xyzHost();

  dfloat rMin = 1000.0;
  dfloat rMax = -1.0;
  for (int n = 0; n < mesh->Nlocal; n++) {
    const auto r = sqrt(x[n] * x[n] + y[n] * y[n]);
    if (x[n] > 0) {
      rMin = std::min(rMin, r);
      rMax = std::max(rMax, r);
    }
  }
  MPI_Allreduce(MPI_IN_PLACE, &rMin, 1, MPI_DFLOAT, MPI_MIN, platform->comm.mpiComm());
  MPI_Allreduce(MPI_IN_PLACE, &rMax, 1, MPI_DFLOAT, MPI_MAX, platform->comm.mpiComm());

  const auto eta = rMin / rMax;
  const auto Ri = eta / (1 - eta);

  if (platform->comm.mpiRank() == 0) {
    std::cout << "eta: " << std::setprecision(4) << eta << std::endl;
  }

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    const auto U0 = 1.0;
    const auto A = -eta * eta / (1 - eta * eta);
    const auto B = Ri * Ri / (1 - eta * eta);
    const auto eps = 0.1;

    std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
    for (int n = 0; n < mesh->Nlocal; n++) {
      const auto r = sqrt(x[n] * x[n] + y[n] * y[n]);
      const auto theta = atan(y[n] / x[n]);

      const auto uThetaLam = A * r + B / r;

      const auto uTheta = U0 * (uThetaLam + eps * sin(theta) * sin((r - Ri) * M_PI / Ri) * sin(z[n]));
      const auto uR = U0 * (eps * cos(theta) * sin((r - Ri) * M_PI / Ri) * sin(z[n]));

      U[n + 0 * nrs->fieldOffset] = uR * cos(theta) - uTheta * sin(theta);
      U[n + 1 * nrs->fieldOffset] = uR * sin(theta) + uTheta * cos(theta);
      U[n + 2 * nrs->fieldOffset] = 0.0;
    }
    nrs->fluid->o_U.copyFrom(U.data(), U.size());
  }

  o_qcriterion.resize(mesh->Nlocal);
  nrs->addUserCheckpointField("scalar00", std::vector<deviceMemory<dfloat>>{o_qcriterion});
}

void UDF_ExecuteStep(double time, int tstep)
{
  if (nrs->checkpointStep) {
    nrs->Qcriterion(o_qcriterion);
  }
}
