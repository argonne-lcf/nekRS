@kernel void boxMapVtxToBox(const dlong ne, @restrict const int *iphi_e, const dlong nc,
                         @restrict const scalar *phi_e, @restrict const scalar *uv, @restrict scalar *ub) {
  for (dlong e = 0; e < ne; ++e; @outer(0)) {
    int ibox = iphi_e[e] - 1;
    @shared scalar s_r[p_NC][p_NC];

    for (int i = 0; i < nc; ++i; @inner(0)) {
      for (int j = 0; j < nc; ++j; @inner(1)) {
        s_r[i][j] = phi_e[j + i * nc + e * nc * nc] * uv[j + nc * e];
      }
    }
    @barrier();

    for (int offset = nc / 2; offset >= 1; offset /= 2) {
      for (int i = 0; i < nc; ++i; @inner(0)) {
        for (int j = 0; j < nc; ++j; @inner(1)) {
          if (j < offset) s_r[i][j] = s_r[i][j] + s_r[i][j + offset];
        }
      }
      @barrier();
    }

    for (int i = 0; i < nc; ++i; @inner(0)) {
      for (int j = 0; j < nc; ++j; @inner(1)) {
        if (j == 0) {
          @atomic ub[i + nc * ibox] += s_r[i][j];
        }
      }
    }
  }
}
