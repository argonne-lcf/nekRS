
#define REDUCE(bs)                                                                                           \
if (t < bs) {                                                                                                \
s_sumX[t] += s_sumX[t + bs];                                                                                 \
s_sumY[t] += s_sumY[t + bs];                                                                                 \
s_sumZ[t] += s_sumZ[t + bs];                                                                                 \
s_sumXp[t] += s_sumXp[t + bs];                                                                               \
s_sumYp[t] += s_sumYp[t + bs];                                                                               \
s_sumZp[t] += s_sumZp[t + bs];                                                                               \
}

@kernel void aeroForces(const dlong Nelements,
                        const dlong offset,
                        const dlong nbID,
                        const dlong *bID,
                        @ restrict const dfloat *sgeo,
                        @ restrict const dlong *vmapM,
                        @ restrict const int *EToBM,
                        @ restrict const dfloat *rho,
                        @ restrict const dfloat *mue,
                        @ restrict const dfloat *P,
                        @ restrict const dfloat *SIJ,
                        @ restrict dfloat *sum)
{
  for (dlong e = 0; e < Nelements; e++; @outer(0)) {
    @shared dfloat s_sumX[p_blockSize];
    @shared dfloat s_sumY[p_blockSize];
    @shared dfloat s_sumZ[p_blockSize];

    @shared dfloat s_sumXp[p_blockSize];
    @shared dfloat s_sumYp[p_blockSize];
    @shared dfloat s_sumZp[p_blockSize];


    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      s_sumX[t] = 0.0;
      s_sumY[t] = 0.0;
      s_sumZ[t] = 0.0;

      s_sumXp[t] = 0.0;
      s_sumYp[t] = 0.0;
      s_sumZp[t] = 0.0;

      if (t < p_Nfp) {
        for (int f = 0; f < p_Nfaces; f++) {
          const dlong bIDM = EToBM[f + p_Nfaces * e];

          for (int ibID = 0; ibID < nbID; ibID++) {
            if (bIDM == bID[ibID]) {
              const int n = t + f * p_Nfp;
              const dlong sid = e * p_Nfaces * p_Nfp + n;

              const dlong idM = vmapM[sid];
              const dfloat sWJ = sgeo[sid * p_Nsgeo + p_WSJID];

              const dfloat n1 = sgeo[sid * p_Nsgeo + p_NXID];
              const dfloat n2 = sgeo[sid * p_Nsgeo + p_NYID];
              const dfloat n3 = sgeo[sid * p_Nsgeo + p_NZID];

              const dfloat s11 = SIJ[idM + 0 * offset];
              const dfloat s21 = SIJ[idM + 1 * offset];
              const dfloat s31 = SIJ[idM + 2 * offset];

              const dfloat s12 = s21;
              const dfloat s22 = SIJ[idM + 3 * offset];
              const dfloat s32 = SIJ[idM + 4 * offset];

              const dfloat s13 = s31;
              const dfloat s23 = s32;
              const dfloat s33 = SIJ[idM + 5 * offset];

              const dfloat scale = -2 * mue[idM] * sWJ;

              // viscous
              s_sumX[t] += scale*(s11 * n1 + s12 * n2 + s13 * n3);
              s_sumY[t] += scale*(s21 * n1 + s22 * n2 + s23 * n3);
              s_sumZ[t] += scale*(s31 * n1 + s32 * n2 + s33 * n3);

              // pressure
              const dfloat Pda = rho[idM] * P[idM] * sWJ;
              s_sumXp[t] += Pda * n1;
              s_sumYp[t] += Pda * n2;
              s_sumZp[t] += Pda * n3;
            }
          }
        }
      }
    }
    @barrier();

#if p_blockSize > 512
    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(512);
    }
    @barrier();
#endif

#if p_blockSize > 256
    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(256);
    }
    @barrier();
#endif
    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(128);
    }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(64);
    }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(32);
    }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(16);
    }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(8);
    }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(4);
    }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      REDUCE(2);
    }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      if (t < 1) {
        sum[e + 0*Nelements] = s_sumX[0] + s_sumX[1];
        sum[e + 1*Nelements] = s_sumY[0] + s_sumY[1];
        sum[e + 2*Nelements] = s_sumZ[0] + s_sumZ[1];

        sum[e + 3*Nelements] = s_sumXp[0] + s_sumXp[1];
        sum[e + 4*Nelements] = s_sumYp[0] + s_sumYp[1];
        sum[e + 5*Nelements] = s_sumZp[0] + s_sumZp[1];
      }
    }
    @barrier();
  }
}
